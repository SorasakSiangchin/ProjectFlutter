// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Backend.Models.Data
{
    public partial class FlutterprojectContext : DbContext
    {
        public FlutterprojectContext()
        {
        }

        public FlutterprojectContext(DbContextOptions<FlutterprojectContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<CategoryProduct> CategoryProduct { get; set; }
        public virtual DbSet<DataAddress> DataAddress { get; set; }
        public virtual DbSet<Delivery> Delivery { get; set; }
        public virtual DbSet<DetailProduct> DetailProduct { get; set; }
        public virtual DbSet<List> List { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderProduct> OrderProduct { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductAdded> ProductAdded { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<Seller> Seller { get; set; }
        public virtual DbSet<StatusDelivery> StatusDelivery { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Thai_CI_AS");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IdDataAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_DataAddress");

                entity.Property(e => e.IdUser).HasColumnName("ID_User");

                entity.HasOne(d => d.IdDataAddressNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdDataAddress)
                    .HasConstraintName("FK_Address_DataAddress");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_Address_User");
            });

            modelBuilder.Entity<Admin>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CategoryProduct>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdSeller).HasColumnName("ID_Seller");

                entity.HasOne(d => d.IdSellerNavigation)
                    .WithMany(p => p.CategoryProduct)
                    .HasForeignKey(d => d.IdSeller)
                    .HasConstraintName("FK_CategoryProduct_Seller");
            });

            modelBuilder.Entity<DataAddress>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.AddressData)
                    .IsUnicode(false)
                    .HasColumnName("Address_Data");

                entity.Property(e => e.AddressDetail)
                    .IsUnicode(false)
                    .HasColumnName("Address_Detail");

                entity.Property(e => e.TelUser)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Delivery>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.IdOrder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_Order");

                entity.Property(e => e.IdStatusDelivery).HasColumnName("ID_StatusDelivery");

                entity.HasOne(d => d.IdOrderNavigation)
                    .WithMany(p => p.Delivery)
                    .HasForeignKey(d => d.IdOrder)
                    .HasConstraintName("FK_Delivery_Order");

                entity.HasOne(d => d.IdStatusDeliveryNavigation)
                    .WithMany(p => p.Delivery)
                    .HasForeignKey(d => d.IdStatusDelivery)
                    .HasConstraintName("FK_Delivery_StatusDelivery");
            });

            modelBuilder.Entity<DetailProduct>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.DataMore).IsUnicode(false);

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Size)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Weight)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.DetailProduct)
                    .HasForeignKey(d => d.IdProduct)
                    .HasConstraintName("FK_DetailProduct_Product");
            });

            modelBuilder.Entity<List>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IdOrder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_Order");

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.HasOne(d => d.IdOrderNavigation)
                    .WithMany(p => p.List)
                    .HasForeignKey(d => d.IdOrder)
                    .HasConstraintName("FK_List_Order");

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.List)
                    .HasForeignKey(d => d.IdProduct)
                    .HasConstraintName("FK_List_Product");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.IdAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_Address");

                entity.Property(e => e.ProofTransfer)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAddressNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.IdAddress)
                    .HasConstraintName("FK_Order_Address");
            });

            modelBuilder.Entity<OrderProduct>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.IdSeller).HasColumnName("ID_Seller");

                entity.HasOne(d => d.IdSellerNavigation)
                    .WithMany(p => p.OrderProduct)
                    .HasForeignKey(d => d.IdSeller)
                    .HasConstraintName("FK_OrderProduct_Seller");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdCategoryProduct).HasColumnName("ID_CategoryProduct");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoryProductNavigation)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.IdCategoryProduct)
                    .HasConstraintName("FK_Product_CategoryProduct");
            });

            modelBuilder.Entity<ProductAdded>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IdOrderProduct).HasColumnName("ID_OrderProduct");

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.HasOne(d => d.IdOrderProductNavigation)
                    .WithMany(p => p.ProductAdded)
                    .HasForeignKey(d => d.IdOrderProduct)
                    .HasConstraintName("FK_ProductAdded_OrderProduct");

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.ProductAdded)
                    .HasForeignKey(d => d.IdProduct)
                    .HasConstraintName("FK_ProductAdded_Product");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.IdList)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_List");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdListNavigation)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.IdList)
                    .HasConstraintName("FK_Review_List");
            });

            modelBuilder.Entity<Seller>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tel)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatusDelivery>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tel)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}